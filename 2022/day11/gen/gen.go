package main

import (
	"bufio"
	"fmt"
	"os"
	"strings"
)

func main() {
	input := bufio.NewScanner(os.Stdin)

	fh, err := os.Create("monkies.go")
	if err != nil {
		panic(err)
	}
	defer fh.Close()

	fmt.Fprintf(fh, `// Code generated by elves, DO NOT EDIT.
package main

type monkey struct {
	nr int
	itemQueue []int
	op func(old int)
	inspected int
}

var monkies []*monkey

func init() {
`)
	var op, items, divBy, destTrue, destFalse string
	x := 10
	monkey := -1

	for input.Scan() {
		if strings.HasPrefix(input.Text(), "Monkey") {
			monkey++
			x = 0
			continue
		}
		//fmt.Println("x", x, "  ", "'"+input.Text()+"'")
		switch x {
		case 0: // starting items
			f := strings.Split(input.Text(), ":")
			items = f[1]
		case 1: // Operation
			f := strings.Split(input.Text(), "=")
			op = f[1]
		case 2: //test
			f := strings.Split(input.Text(), "by ")
			divBy = f[1]
		case 3: // If true
			f := strings.Fields(input.Text())
			destTrue = f[len(f)-1]

		case 4: // If false
			f := strings.Fields(input.Text())
			destFalse = f[len(f)-1]

			// we've read everything for the current monkey
			//fmt.Println("Monkey", monkey, items, op, divBy, destTrue, destFalse)
			fmt.Fprintf(fh, `monkies = append(monkies, &monkey{
	nr: %d,
	itemQueue: []int{%s},
	op: func(old int) {
		old = (%s) / 3
		if old %% %s == 0 {
			monkies[%s].itemQueue = append(monkies[%s].itemQueue, old)
		} else {
			monkies[%s].itemQueue = append(monkies[%s].itemQueue, old)
		}
	},
})
`, monkey, items, op, divBy, destTrue, destTrue, destFalse, destFalse)
		}
		x++
	}

	fmt.Fprintf(fh, "}\n")
}
